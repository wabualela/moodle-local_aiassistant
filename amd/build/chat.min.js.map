{"version":3,"file":"chat.min.js","sources":["../src/chat.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AI Assistant Chat Interface\n *\n * @module     local_aiassistant/chat\n * @copyright  2025 Wail Abualela\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax', 'core/notification'], function($, Ajax, Notification) {\n\n    const FALLBACK_ERROR_MESSAGE = 'An unexpected error occurred. Please try again later.';\n    const STORAGE_KEY = 'local_aiassistant_chat_history';\n\n    /**\n     * Chat class to handle AI assistant interaction\n     */\n    class Chat {\n        /**\n         * Constructor\n         */\n        constructor() {\n            this.fab = null;\n            this.chatBox = null;\n            this.messagesContainer = null;\n            this.input = null;\n            this.sendButton = null;\n            this.closeButton = null;\n            this.optionsButton = null;\n            this.attachmentButton = null;\n            this.isOpen = false;\n            this.history = [];\n            this.isSending = false;\n            this.errorMessage = '';\n        }\n\n        /**\n         * Initialize the chat interface\n         */\n        init() {\n            // Get DOM elements\n            this.fab = document.getElementById('local-aiassistant-fab');\n            this.chatBox = document.getElementById('local-aiassistant-chat');\n\n            if (!this.fab || !this.chatBox) {\n                window.console.warn('AI Assistant: Required elements not found');\n                return;\n            }\n\n            this.messagesContainer = this.chatBox.querySelector('#local-aiassistant-messages');\n            this.input = this.chatBox.querySelector('#local-aiassistant-input');\n            this.sendButton = this.chatBox.querySelector('#local-aiassistant-send');\n            this.closeButton = this.chatBox.querySelector('.local-aiassistant-chat-close');\n            this.optionsButton = this.chatBox.querySelector('.local-aiassistant-chat-options');\n            this.clearButton = this.chatBox.querySelector('.local-aiassistant-chat-clear');\n            this.attachmentButton = this.chatBox.querySelector('.local-aiassistant-attachment');\n\n            if (this.chatBox && this.chatBox.dataset && this.chatBox.dataset.errorGeneric) {\n                this.errorMessage = this.chatBox.dataset.errorGeneric;\n            } else {\n                this.errorMessage = FALLBACK_ERROR_MESSAGE;\n            }\n\n            // Load chat history from localStorage\n            this.loadHistory();\n\n            // Bind event listeners\n            this.bindEvents();\n\n            window.console.log('AI Assistant Chat initialized');\n        }\n\n        /**\n         * Bind all event listeners\n         */\n        bindEvents() {\n            // FAB click to open chat\n            this.fab.addEventListener('click', () => this.toggleChat());\n\n            // Also handle keyboard navigation for FAB\n            this.fab.addEventListener('keydown', (e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                    e.preventDefault();\n                    this.toggleChat();\n                }\n            });\n\n            // Close button\n            if (this.closeButton) {\n                this.closeButton.addEventListener('click', () => this.closeChat());\n            }\n\n            // Options button\n            if (this.optionsButton) {\n                this.optionsButton.addEventListener('click', () => this.openSettings());\n            }\n\n            // Clear history button\n            if (this.clearButton) {\n                this.clearButton.addEventListener('click', () => {\n                    if (confirm('Are you sure you want to clear the chat history? This cannot be undone.')) {\n                        this.clearHistory();\n                    }\n                });\n            }\n\n            // Send button\n            if (this.sendButton) {\n                this.sendButton.addEventListener('click', () => this.sendMessage());\n            }\n\n            // Enter key in input\n            if (this.input) {\n                this.input.addEventListener('keypress', (e) => {\n                    if (e.key === 'Enter' && !e.shiftKey) {\n                        e.preventDefault();\n                        this.sendMessage();\n                    }\n                });\n            }\n\n            // Close chat when clicking outside\n            document.addEventListener('click', (e) => {\n                if (this.isOpen &&\n                    !this.chatBox.contains(e.target) &&\n                    !this.fab.contains(e.target)) {\n                    this.closeChat();\n                }\n            });\n\n            // Prevent closing when clicking inside chat\n            this.chatBox.addEventListener('click', (e) => {\n                e.stopPropagation();\n            });\n        }\n\n        /**\n         * Enable or disable the chat controls while a request is in progress.\n         *\n         * @param {boolean} disabled\n         */\n        setInputDisabled(disabled) {\n            if (this.input) {\n                this.input.disabled = disabled;\n            }\n            if (this.sendButton) {\n                this.sendButton.disabled = disabled;\n            }\n            if (this.attachmentButton) {\n                this.attachmentButton.disabled = disabled;\n            }\n        }\n\n        /**\n         * Toggle chat visibility\n         */\n        toggleChat() {\n            if (this.isOpen) {\n                this.closeChat();\n            } else {\n                this.openChat();\n            }\n        }\n\n        /**\n         * Open the chat interface\n         */\n        openChat() {\n            this.chatBox.classList.add('is-visible');\n            this.fab.classList.add('is-hidden');\n            this.isOpen = true;\n            this.fab.setAttribute('aria-expanded', 'true');\n\n            // Focus on input field\n            if (this.input) {\n                setTimeout(() => this.input.focus(), 100);\n            }\n        }\n\n        /**\n         * Close the chat interface\n         */\n        closeChat() {\n            this.chatBox.classList.remove('is-visible');\n            this.fab.classList.remove('is-hidden');\n            this.isOpen = false;\n            this.fab.setAttribute('aria-expanded', 'false');\n        }\n\n        /**\n         * Open settings page\n         */\n        openSettings() {\n            const settingsUrl = this.chatBox.getAttribute('data-settingsurl');\n            if (settingsUrl) {\n                window.location.href = settingsUrl;\n            }\n        }\n\n        /**\n         * Send a message\n         */\n        sendMessage() {\n            if (this.isSending) {\n                return;\n            }\n\n            const message = this.input.value.trim();\n\n            if (message === '') {\n                return;\n            }\n\n            const historyPayload = this.history.map((entry) => ({\n                message: entry.message\n            }));\n\n            // Add user message to UI\n            this.addMessage(message, 'user');\n\n            // Clear input\n            this.input.value = '';\n\n            // Persist user message for future turns.\n            this.history.push({sender: 'user', message: message});\n\n            // Save history to localStorage\n            this.saveHistory();\n\n            // Show typing indicator\n            this.showTypingIndicator();\n\n            this.setInputDisabled(true);\n            this.isSending = true;\n\n            Ajax.call([{\n                methodname: 'local_aiassistant_get_completion',\n                args: {\n                    message: message,\n                    history: historyPayload,\n                },\n            }])[0]\n                .then((response) => {\n                    window.console.log('AI Response received:', response);\n                    if (response.success) {\n                        const content = response.formattedmessage || response.message;\n                        window.console.log('Adding AI message, renderAsHtml:', Boolean(response.formattedmessage));\n                        this.addMessage(content, 'ai', {\n                            renderAsHtml: Boolean(response.formattedmessage),\n                        });\n                        this.history.push({sender: 'ai', message: response.message});\n                        // Save history to localStorage\n                        this.saveHistory();\n                    } else {\n                        window.console.log('AI Response failed:', response.message);\n                        const errortext = response.message || this.errorMessage;\n                        this.addMessage(errortext, 'ai', {\n                            isError: true,\n                        });\n                    }\n\n                    // Cleanup after successful response\n                    window.console.log('Cleaning up after response');\n                    this.hideTypingIndicator();\n                    this.setInputDisabled(false);\n                    this.isSending = false;\n                    if (this.input) {\n                        this.input.focus();\n                    }\n                })\n                .catch((error) => {\n                    window.console.error('Ajax call failed:', error);\n                    Notification.exception(error);\n                    this.addMessage(this.errorMessage, 'ai', {\n                        isError: true,\n                    });\n\n                    // Cleanup after error\n                    window.console.log('Cleaning up after error');\n                    this.hideTypingIndicator();\n                    this.setInputDisabled(false);\n                    this.isSending = false;\n                    if (this.input) {\n                        this.input.focus();\n                    }\n                });\n        }\n\n        /**\n         * Add a message to the chat\n         *\n         * @param {string} text - The message text\n         * @param {string} sender - Either 'user' or 'ai'\n         * @param {Object} options - Additional options for rendering the message\n         */\n        addMessage(text, sender, options = {}) {\n            const renderAsHtml = options.renderAsHtml || false;\n            const isError = options.isError || false;\n\n            window.console.log('addMessage called:', {sender, renderAsHtml, isError, textLength: text.length});\n\n            const messageDiv = document.createElement('div');\n            messageDiv.className = `local-aiassistant-message local-aiassistant-message-${sender}`;\n            if (isError) {\n                messageDiv.classList.add('local-aiassistant-message-error');\n            }\n\n            const contentDiv = document.createElement('div');\n            contentDiv.className = 'local-aiassistant-message-content';\n            if (renderAsHtml) {\n                // Sanitize and render HTML safely\n                contentDiv.innerHTML = text;\n                // Remove any script tags that might have been added\n                const scripts = contentDiv.querySelectorAll('script');\n                scripts.forEach(script => script.remove());\n            } else {\n                contentDiv.textContent = text;\n            }\n\n            const timeDiv = document.createElement('div');\n            timeDiv.className = 'local-aiassistant-message-time';\n            timeDiv.textContent = this.getCurrentTime();\n\n            messageDiv.appendChild(contentDiv);\n            messageDiv.appendChild(timeDiv);\n\n            this.messagesContainer.appendChild(messageDiv);\n\n            window.console.log('Message added to DOM');\n\n            // Scroll to bottom\n            this.scrollToBottom();\n        }\n\n        /**\n         * Show typing indicator\n         */\n        showTypingIndicator() {\n            this.hideTypingIndicator();\n            const indicator = document.createElement('div');\n            indicator.className = 'local-aiassistant-typing-indicator';\n            indicator.id = 'local-aiassistant-typing';\n            indicator.innerHTML = '<span></span><span></span><span></span>';\n\n            this.messagesContainer.appendChild(indicator);\n            this.scrollToBottom();\n        }\n\n        /**\n         * Hide typing indicator\n         */\n        hideTypingIndicator() {\n            const indicator = document.getElementById('local-aiassistant-typing');\n            if (indicator) {\n                indicator.remove();\n            }\n        }\n\n        /**\n         * Scroll messages to bottom\n         */\n        scrollToBottom() {\n            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;\n        }\n\n        /**\n         * Get current time formatted\n         *\n         * @returns {string} Formatted time\n         */\n        getCurrentTime() {\n            const now = new Date();\n            return now.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n        }\n\n        /**\n         * Save chat history to localStorage\n         */\n        saveHistory() {\n            try {\n                const historyData = {\n                    history: this.history,\n                    timestamp: Date.now()\n                };\n                localStorage.setItem(STORAGE_KEY, JSON.stringify(historyData));\n                window.console.log('Chat history saved to localStorage');\n            } catch (e) {\n                window.console.error('Failed to save chat history:', e);\n            }\n        }\n\n        /**\n         * Load chat history from localStorage\n         */\n        loadHistory() {\n            try {\n                const stored = localStorage.getItem(STORAGE_KEY);\n                if (!stored) {\n                    window.console.log('No chat history found in localStorage');\n                    return;\n                }\n\n                const historyData = JSON.parse(stored);\n\n                // Check if history is older than 24 hours\n                const now = Date.now();\n                const twentyFourHours = 24 * 60 * 60 * 1000;\n                if (historyData.timestamp && (now - historyData.timestamp) > twentyFourHours) {\n                    window.console.log('Chat history expired, clearing');\n                    this.clearHistory();\n                    return;\n                }\n\n                if (historyData.history && Array.isArray(historyData.history)) {\n                    this.history = historyData.history;\n                    window.console.log('Chat history loaded:', this.history.length, 'messages');\n\n                    // Restore messages to UI\n                    this.restoreMessagesToUI();\n                }\n            } catch (e) {\n                window.console.error('Failed to load chat history:', e);\n                this.clearHistory();\n            }\n        }\n\n        /**\n         * Restore saved messages to the UI\n         */\n        restoreMessagesToUI() {\n            // Remove the welcome message if we have history\n            if (this.history.length > 0) {\n                const welcomeMessage = this.messagesContainer.querySelector('.local-aiassistant-message-ai');\n                if (welcomeMessage) {\n                    welcomeMessage.remove();\n                }\n            }\n\n            // Add each message from history\n            this.history.forEach((entry) => {\n                this.addMessage(entry.message, entry.sender, {\n                    renderAsHtml: entry.sender === 'ai',\n                    skipHistoryUpdate: true\n                });\n            });\n\n            window.console.log('Restored', this.history.length, 'messages to UI');\n        }\n\n        /**\n         * Clear chat history\n         */\n        clearHistory() {\n            try {\n                localStorage.removeItem(STORAGE_KEY);\n                this.history = [];\n                window.console.log('Chat history cleared');\n\n                // Clear all UI messages\n                const messages = this.messagesContainer.querySelectorAll('.local-aiassistant-message');\n                messages.forEach((msg) => {\n                    msg.remove();\n                });\n\n                // Reload the page to restore the welcome message from the template\n                window.location.reload();\n            } catch (e) {\n                window.console.error('Failed to clear chat history:', e);\n            }\n        }\n    }\n\n    return {\n        /**\n         * Initialize the chat module\n         */\n        init: function() {\n            // Wait for DOM to be ready\n            $(document).ready(function() {\n                const chat = new Chat();\n                chat.init();\n            });\n        }\n    };\n});\n"],"names":["define","$","Ajax","Notification","STORAGE_KEY","Chat","constructor","fab","chatBox","messagesContainer","input","sendButton","closeButton","optionsButton","attachmentButton","isOpen","history","isSending","errorMessage","init","document","getElementById","this","querySelector","clearButton","dataset","errorGeneric","loadHistory","bindEvents","window","console","log","warn","addEventListener","toggleChat","e","key","preventDefault","closeChat","openSettings","confirm","clearHistory","sendMessage","shiftKey","contains","target","stopPropagation","setInputDisabled","disabled","openChat","classList","add","setAttribute","setTimeout","focus","remove","settingsUrl","getAttribute","location","href","message","value","trim","historyPayload","map","entry","addMessage","push","sender","saveHistory","showTypingIndicator","call","methodname","args","then","response","success","content","formattedmessage","Boolean","renderAsHtml","errortext","isError","hideTypingIndicator","catch","error","exception","text","options","textLength","length","messageDiv","createElement","className","contentDiv","innerHTML","querySelectorAll","forEach","script","textContent","timeDiv","getCurrentTime","appendChild","scrollToBottom","indicator","id","scrollTop","scrollHeight","Date","toLocaleTimeString","hour","minute","historyData","timestamp","now","localStorage","setItem","JSON","stringify","stored","getItem","parse","twentyFourHours","Array","isArray","restoreMessagesToUI","welcomeMessage","skipHistoryUpdate","removeItem","msg","reload","ready"],"mappings":"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"}