{"version":3,"file":"chat.min.js","sources":["../src/chat.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AI Assistant Chat Interface\n *\n * @module     local_aiassistant/chat\n * @copyright  2025 Wail Abualela\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery'], function($) {\n\n    /**\n     * Chat class to handle AI assistant interaction\n     */\n    class Chat {\n        /**\n         * Constructor\n         */\n        constructor() {\n            this.fab = null;\n            this.chatBox = null;\n            this.messagesContainer = null;\n            this.input = null;\n            this.sendButton = null;\n            this.closeButton = null;\n            this.isOpen = false;\n        }\n\n        /**\n         * Initialize the chat interface\n         */\n        init() {\n            // Get DOM elements\n            this.fab = document.getElementById('local-aiassistant-fab');\n            this.chatBox = document.getElementById('local-aiassistant-chat');\n\n            if (!this.fab || !this.chatBox) {\n                window.console.warn('AI Assistant: Required elements not found');\n                return;\n            }\n\n            this.messagesContainer = this.chatBox.querySelector('#local-aiassistant-messages');\n            this.input = this.chatBox.querySelector('#local-aiassistant-input');\n            this.sendButton = this.chatBox.querySelector('#local-aiassistant-send');\n            this.closeButton = this.chatBox.querySelector('.local-aiassistant-chat-close');\n\n            // Bind event listeners\n            this.bindEvents();\n\n            window.console.log('AI Assistant Chat initialized');\n        }\n\n        /**\n         * Bind all event listeners\n         */\n        bindEvents() {\n            // FAB click to open chat\n            this.fab.addEventListener('click', () => this.toggleChat());\n\n            // Also handle keyboard navigation for FAB\n            this.fab.addEventListener('keydown', (e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                    e.preventDefault();\n                    this.toggleChat();\n                }\n            });\n\n            // Close button\n            if (this.closeButton) {\n                this.closeButton.addEventListener('click', () => this.closeChat());\n            }\n\n            // Send button\n            if (this.sendButton) {\n                this.sendButton.addEventListener('click', () => this.sendMessage());\n            }\n\n            // Enter key in input\n            if (this.input) {\n                this.input.addEventListener('keypress', (e) => {\n                    if (e.key === 'Enter' && !e.shiftKey) {\n                        e.preventDefault();\n                        this.sendMessage();\n                    }\n                });\n            }\n\n            // Close chat when clicking outside\n            document.addEventListener('click', (e) => {\n                if (this.isOpen &&\n                    !this.chatBox.contains(e.target) &&\n                    !this.fab.contains(e.target)) {\n                    this.closeChat();\n                }\n            });\n\n            // Prevent closing when clicking inside chat\n            this.chatBox.addEventListener('click', (e) => {\n                e.stopPropagation();\n            });\n        }\n\n        /**\n         * Toggle chat visibility\n         */\n        toggleChat() {\n            if (this.isOpen) {\n                this.closeChat();\n            } else {\n                this.openChat();\n            }\n        }\n\n        /**\n         * Open the chat interface\n         */\n        openChat() {\n            this.chatBox.classList.add('is-visible');\n            this.fab.classList.add('is-hidden');\n            this.isOpen = true;\n            this.fab.setAttribute('aria-expanded', 'true');\n\n            // Focus on input field\n            if (this.input) {\n                setTimeout(() => this.input.focus(), 100);\n            }\n        }\n\n        /**\n         * Close the chat interface\n         */\n        closeChat() {\n            this.chatBox.classList.remove('is-visible');\n            this.fab.classList.remove('is-hidden');\n            this.isOpen = false;\n            this.fab.setAttribute('aria-expanded', 'false');\n        }\n\n        /**\n         * Send a message\n         */\n        sendMessage() {\n            const message = this.input.value.trim();\n\n            if (message === '') {\n                return;\n            }\n\n            // Add user message to UI\n            this.addMessage(message, 'user');\n\n            // Clear input\n            this.input.value = '';\n\n            // Show typing indicator\n            this.showTypingIndicator();\n\n            // TODO: Send to backend via web service\n            // For now, simulate a response\n            setTimeout(() => {\n                this.hideTypingIndicator();\n                this.addMessage('This is a simulated response. Web service integration coming soon!', 'ai');\n            }, 1000);\n        }\n\n        /**\n         * Add a message to the chat\n         *\n         * @param {string} text - The message text\n         * @param {string} sender - Either 'user' or 'ai'\n         */\n        addMessage(text, sender) {\n            const messageDiv = document.createElement('div');\n            messageDiv.className = `local-aiassistant-message local-aiassistant-message-${sender}`;\n\n            const contentDiv = document.createElement('div');\n            contentDiv.className = 'local-aiassistant-message-content';\n            contentDiv.textContent = text;\n\n            const timeDiv = document.createElement('div');\n            timeDiv.className = 'local-aiassistant-message-time';\n            timeDiv.textContent = this.getCurrentTime();\n\n            messageDiv.appendChild(contentDiv);\n            messageDiv.appendChild(timeDiv);\n\n            this.messagesContainer.appendChild(messageDiv);\n\n            // Scroll to bottom\n            this.scrollToBottom();\n        }\n\n        /**\n         * Show typing indicator\n         */\n        showTypingIndicator() {\n            const indicator = document.createElement('div');\n            indicator.className = 'local-aiassistant-typing-indicator';\n            indicator.id = 'local-aiassistant-typing';\n            indicator.innerHTML = '<span></span><span></span><span></span>';\n\n            this.messagesContainer.appendChild(indicator);\n            this.scrollToBottom();\n        }\n\n        /**\n         * Hide typing indicator\n         */\n        hideTypingIndicator() {\n            const indicator = document.getElementById('local-aiassistant-typing');\n            if (indicator) {\n                indicator.remove();\n            }\n        }\n\n        /**\n         * Scroll messages to bottom\n         */\n        scrollToBottom() {\n            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;\n        }\n\n        /**\n         * Get current time formatted\n         *\n         * @returns {string} Formatted time\n         */\n        getCurrentTime() {\n            const now = new Date();\n            return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n        }\n    }\n\n    return {\n        /**\n         * Initialize the chat module\n         */\n        init: function() {\n            // Wait for DOM to be ready\n            $(document).ready(function() {\n                const chat = new Chat();\n                chat.init();\n            });\n        }\n    };\n});\n"],"names":["define","$","Chat","constructor","fab","chatBox","messagesContainer","input","sendButton","closeButton","isOpen","init","document","getElementById","this","querySelector","bindEvents","window","console","log","warn","addEventListener","toggleChat","e","key","preventDefault","closeChat","sendMessage","shiftKey","contains","target","stopPropagation","openChat","classList","add","setAttribute","setTimeout","focus","remove","message","value","trim","addMessage","showTypingIndicator","hideTypingIndicator","text","sender","messageDiv","createElement","className","contentDiv","textContent","timeDiv","getCurrentTime","appendChild","scrollToBottom","indicator","id","innerHTML","scrollTop","scrollHeight","Date","toLocaleTimeString","hour","minute","ready"],"mappings":";;;;;;;AAuBAA,gCAAO,CAAC,WAAW,SAASC,SAKlBC,KAIFC,mBACSC,IAAM,UACNC,QAAU,UACVC,kBAAoB,UACpBC,MAAQ,UACRC,WAAa,UACbC,YAAc,UACdC,QAAS,EAMlBC,YAESP,IAAMQ,SAASC,eAAe,8BAC9BR,QAAUO,SAASC,eAAe,0BAElCC,KAAKV,KAAQU,KAAKT,cAKlBC,kBAAoBQ,KAAKT,QAAQU,cAAc,oCAC/CR,MAAQO,KAAKT,QAAQU,cAAc,iCACnCP,WAAaM,KAAKT,QAAQU,cAAc,gCACxCN,YAAcK,KAAKT,QAAQU,cAAc,sCAGzCC,aAELC,OAAOC,QAAQC,IAAI,kCAZfF,OAAOC,QAAQE,KAAK,6CAkB5BJ,kBAESZ,IAAIiB,iBAAiB,SAAS,IAAMP,KAAKQ,oBAGzClB,IAAIiB,iBAAiB,WAAYE,IACpB,UAAVA,EAAEC,KAA6B,MAAVD,EAAEC,MACvBD,EAAEE,sBACGH,iBAKTR,KAAKL,kBACAA,YAAYY,iBAAiB,SAAS,IAAMP,KAAKY,cAItDZ,KAAKN,iBACAA,WAAWa,iBAAiB,SAAS,IAAMP,KAAKa,gBAIrDb,KAAKP,YACAA,MAAMc,iBAAiB,YAAaE,IACvB,UAAVA,EAAEC,KAAoBD,EAAEK,WACxBL,EAAEE,sBACGE,kBAMjBf,SAASS,iBAAiB,SAAUE,KAC5BT,KAAKJ,QACJI,KAAKT,QAAQwB,SAASN,EAAEO,SACxBhB,KAAKV,IAAIyB,SAASN,EAAEO,cAChBJ,oBAKRrB,QAAQgB,iBAAiB,SAAUE,IACpCA,EAAEQ,qBAOVT,aACQR,KAAKJ,YACAgB,iBAEAM,WAObA,gBACS3B,QAAQ4B,UAAUC,IAAI,mBACtB9B,IAAI6B,UAAUC,IAAI,kBAClBxB,QAAS,OACTN,IAAI+B,aAAa,gBAAiB,QAGnCrB,KAAKP,OACL6B,YAAW,IAAMtB,KAAKP,MAAM8B,SAAS,KAO7CX,iBACSrB,QAAQ4B,UAAUK,OAAO,mBACzBlC,IAAI6B,UAAUK,OAAO,kBACrB5B,QAAS,OACTN,IAAI+B,aAAa,gBAAiB,SAM3CR,oBACUY,QAAUzB,KAAKP,MAAMiC,MAAMC,OAEjB,KAAZF,eAKCG,WAAWH,QAAS,aAGpBhC,MAAMiC,MAAQ,QAGdG,sBAILP,YAAW,UACFQ,2BACAF,WAAW,qEAAsE,QACvF,MASPA,WAAWG,KAAMC,cACPC,WAAanC,SAASoC,cAAc,OAC1CD,WAAWE,wEAAmEH,cAExEI,WAAatC,SAASoC,cAAc,OAC1CE,WAAWD,UAAY,oCACvBC,WAAWC,YAAcN,WAEnBO,QAAUxC,SAASoC,cAAc,OACvCI,QAAQH,UAAY,iCACpBG,QAAQD,YAAcrC,KAAKuC,iBAE3BN,WAAWO,YAAYJ,YACvBH,WAAWO,YAAYF,cAElB9C,kBAAkBgD,YAAYP,iBAG9BQ,iBAMTZ,4BACUa,UAAY5C,SAASoC,cAAc,OACzCQ,UAAUP,UAAY,qCACtBO,UAAUC,GAAK,2BACfD,UAAUE,UAAY,+CAEjBpD,kBAAkBgD,YAAYE,gBAC9BD,iBAMTX,4BACUY,UAAY5C,SAASC,eAAe,4BACtC2C,WACAA,UAAUlB,SAOlBiB,sBACSjD,kBAAkBqD,UAAY7C,KAAKR,kBAAkBsD,aAQ9DP,wBACgB,IAAIQ,MACLC,mBAAmB,GAAI,CAAEC,KAAM,UAAWC,OAAQ,mBAI9D,CAIHrD,KAAM,WAEFV,EAAEW,UAAUqD,OAAM,YACD,IAAI/D,MACZS"}